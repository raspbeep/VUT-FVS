var g_data = {"name":"top_level.sv","src":"// The topmost encapsulation level of the verification\nmodule top;\n\n    import uvm_pkg::*;\n    import sv_param_pkg::*;\n    import sv_timer_t_agent_pkg::*;\n    import sv_timer_t_env_pkg::*;\n    import sv_timer_t_test_pkg::*;\n    import registers_pkg::*;\n\n    // Global clock signal definition\n    logic CLK;\n\n    // clock generation\n    initial begin\n        CLK <= \'b0;\n        #(CLK_PERIOD/2) forever #(CLK_PERIOD/2) CLK = ~CLK;\n    end\n\n    // customize the default printer\n    initial begin\n        automatic uvm_table_printer printer = new;\n        printer.knobs.begin_elements = -1;\n        printer.knobs.value_width = -1;\n        uvm_default_printer = printer;\n        $timeformat(-9, 0, \" ns\", 8);\n    end\n\n    // Virtual interface\n    // bind of clock to virtual interface signal\n    itimer_itf timer_t_if( CLK );\n\n    // DUT instance\n    // design we verify\n    timer #(\n        .TIMER_ADDR_SPACE_BITS(TIMER_ADDR_SPACE_BITS),\n        .DATA_WIDTH(DATA_WIDTH),\n        .ADDR_WIDTH(ADDR_WIDTH),\n        .RST_ACT_LEVEL(RST_ACT_LEVEL)\n    )\n    // interconnection between testbench and DUT\n    // signal of the DUT(signal in the virtual interface)\n    HDL_DUT_U(\n        .CLK(timer_t_if.CLK),\n        .RST(timer_t_if.RST),\n        .P_IRQ(timer_t_if.P_IRQ),\n        .ADDRESS(timer_t_if.ADDRESS),\n        .REQUEST(timer_t_if.REQUEST),\n        .RESPONSE(timer_t_if.RESPONSE),\n        .DATA_OUT(timer_t_if.DATA_OUT),\n        .DATA_IN(timer_t_if.DATA_IN)\n    );\n\n    // dotiahnutie interneho signalu z DUT do UVM TB\n    // coverage.svh:9\n    bind top.HDL_DUT_U dut_internal_if ctrl(\n        .ctrl_reg_d(ctrl_reg_d)\n    );\n\n    // signal z dizajnu(signal na assertion module)\n    // assertions checker instance\n    bind HDL_DUT_U abv_timer abv_timer_module(\n        .CLK(CLK),\n        .RST(RST),\n        .P_IRQ(P_IRQ),\n        .ADDRESS(ADDRESS),\n        .REQUEST(REQUEST),\n        .DATA_IN(DATA_IN),\n        .RESPONSE(RESPONSE),\n        .DATA_OUT(DATA_OUT),\n        .ctrl_reg_d(ctrl_reg_d),\n        .cnt_reg_d(cnt_reg_d),\n        .cmp_reg_d(cmp_reg_d),\n        .cycle_cnt(cycle_cnt)\n    );\n\n    // run default test\n    initial begin\n        // register virtual interface to database\n        uvm_config_db #(virtual itimer_itf )::set( null,\n            \"uvm_test_top\",\n            \"timer_t_if\",\n            timer_t_if );\n\n        uvm_config_db #(virtual dut_internal_if )::set( null,\"\",\"dut_internal_if\",top.HDL_DUT_U.ctrl ) ;\n        // start of the simulation\n        // launches the name of the particular test to run\n        run_test( \"timer_t_test\" );\n    end\nendmodule: top\n","lang":"verilog"};
processSrcData(g_data);